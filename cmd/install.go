package cmd

import (
	"fmt"
	"os"

	"github.com/TouchBistro/goutils/color"
	"github.com/TouchBistro/goutils/fatal"
	"github.com/cszatmary/go-fish/config"
	"github.com/cszatmary/go-fish/git"
	"github.com/cszatmary/go-fish/hooks"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

type installOptions struct {
	force bool
}

var installOpts installOptions

var installCmd = &cobra.Command{
	Use:   "install",
	Args:  cobra.NoArgs,
	Short: "Install the git hooks",
	Long: `Install will generate missing git hooks and recreate git hooks that were created by go-fish.
By default it will not replace existing git hooks not created by go-fish.`,
	Run: func(cmd *cobra.Command, args []string) {
		if isCI() && config.SkipCI() {
			fmt.Println("CI detected, skipping Git hooks installation")
			return
		}

		fmt.Println("Installing git hooks...")
		gitDir, err := git.GitDir()
		if err != nil {
			fatal.ExitErr(err, "Failed to find root directory of git repo")
		}
		log.Debugf("Found git directory at: %s", gitDir)

		log.Debug("Creating git hooks...")
		err = hooks.CreateHooks(gitDir, version, installOpts.force)
		if err != nil {
			fatal.ExitErr(err, "Failed to create git hooks")
		}

		fmt.Println(color.Green("Successfully installed Git hooks! Enjoy! ðŸŽ£"))
	},
}

func init() {
	installCmd.Flags().BoolVar(&installOpts.force, "force", false, "replaces any existing hooks not generated by go-fish")
	rootCmd.AddCommand(installCmd)
}

func isCI() bool {
	return os.Getenv("CI") != "" ||
		os.Getenv("CONTINUOUS_INTEGRATION") != "" ||
		os.Getenv("BUILD_NUMBER") != "" ||
		os.Getenv("RUN_ID") != ""
}
